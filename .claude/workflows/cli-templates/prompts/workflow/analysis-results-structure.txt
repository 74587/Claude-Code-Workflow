Generate ANALYSIS_RESULTS.md with comprehensive solution design and technical analysis.

## OUTPUT FILE STRUCTURE

### Required Sections

```markdown
# Technical Analysis & Solution Design

## Executive Summary
- **Analysis Focus**: {core_problem_or_improvement_area}
- **Analysis Timestamp**: {timestamp}
- **Tools Used**: {analysis_tools}
- **Overall Assessment**: {feasibility_score}/5 - {recommendation_status}

---

## 1. Current State Analysis

### Architecture Overview
- **Existing Patterns**: {key_architectural_patterns}
- **Code Structure**: {current_codebase_organization}
- **Integration Points**: {system_integration_touchpoints}
- **Technical Debt Areas**: {identified_debt_with_impact}

### Compatibility & Dependencies
- **Framework Alignment**: {framework_compatibility_assessment}
- **Dependency Analysis**: {critical_dependencies_and_risks}
- **Migration Considerations**: {backward_compatibility_concerns}

### Critical Findings
- **Strengths**: {what_works_well}
- **Gaps**: {missing_capabilities_or_issues}
- **Risks**: {identified_technical_and_business_risks}

---

## 2. Proposed Solution Design

### Core Architecture Principles
- **Design Philosophy**: {key_design_principles}
- **Architectural Approach**: {chosen_architectural_pattern_with_rationale}
- **Scalability Strategy**: {how_solution_scales}

### System Design
- **Component Architecture**: {high_level_component_design}
- **Data Flow**: {data_flow_patterns_and_state_management}
- **API Design**: {interface_contracts_and_specifications}
- **Integration Strategy**: {how_components_integrate}

### Key Design Decisions
1. **Decision**: {critical_design_choice}
   - **Rationale**: {why_this_approach}
   - **Alternatives Considered**: {other_options_and_tradeoffs}
   - **Impact**: {implications_on_architecture}

2. **Decision**: {another_critical_choice}
   - **Rationale**: {reasoning}
   - **Alternatives Considered**: {tradeoffs}
   - **Impact**: {consequences}

### Technical Specifications
- **Technology Stack**: {chosen_technologies_with_justification}
- **Code Organization**: {module_structure_and_patterns}
- **Testing Strategy**: {testing_approach_and_coverage}
- **Performance Targets**: {performance_requirements_and_benchmarks}

---

## 3. Implementation Strategy

### Development Approach
- **Core Implementation Pattern**: {primary_implementation_strategy}
- **Module Dependencies**: {dependency_graph_and_order}
- **Quality Assurance**: {qa_approach_and_validation}

### Code Modification Targets
**Purpose**: Specific code locations for modification AND new files to create

**Identified Targets**:
1. **Target**: `src/module/File.ts:function:45-52`
   - **Type**: Modify existing
   - **Modification**: {what_to_change}
   - **Rationale**: {why_change_needed}

2. **Target**: `src/module/NewFile.ts`
   - **Type**: Create new file
   - **Purpose**: {file_purpose}
   - **Rationale**: {why_new_file_needed}

**Format Rules**:
- Existing files: `file:function:lines` (with line numbers)
- New files: `file` (no function or lines)
- Unknown lines: `file:function:*`

### Feasibility Assessment
- **Technical Complexity**: {complexity_rating_and_analysis}
- **Performance Impact**: {expected_performance_characteristics}
- **Resource Requirements**: {development_resources_needed}
- **Maintenance Burden**: {ongoing_maintenance_considerations}

### Risk Mitigation
- **Technical Risks**: {implementation_risks_and_mitigation}
- **Integration Risks**: {compatibility_challenges_and_solutions}
- **Performance Risks**: {performance_concerns_and_strategies}
- **Security Risks**: {security_vulnerabilities_and_controls}

---

## 4. Solution Optimization

### Performance Optimization
- **Optimization Strategies**: {key_performance_improvements}
- **Caching Strategy**: {caching_approach_and_invalidation}
- **Resource Management**: {resource_utilization_optimization}
- **Bottleneck Mitigation**: {identified_bottlenecks_and_solutions}

### Security Enhancements
- **Security Model**: {authentication_authorization_approach}
- **Data Protection**: {data_security_and_encryption}
- **Vulnerability Mitigation**: {known_vulnerabilities_and_controls}
- **Compliance**: {regulatory_and_compliance_considerations}

### Code Quality
- **Code Standards**: {coding_conventions_and_patterns}
- **Testing Coverage**: {test_strategy_and_coverage_goals}
- **Documentation**: {documentation_requirements}
- **Maintainability**: {maintainability_practices}

---

## 5. Critical Success Factors

### Technical Requirements
- **Must Have**: {essential_technical_capabilities}
- **Should Have**: {important_but_not_critical_features}
- **Nice to Have**: {optional_enhancements}

### Quality Metrics
- **Performance Benchmarks**: {measurable_performance_targets}
- **Code Quality Standards**: {quality_metrics_and_thresholds}
- **Test Coverage Goals**: {testing_coverage_requirements}
- **Security Standards**: {security_compliance_requirements}

### Success Validation
- **Acceptance Criteria**: {how_to_validate_success}
- **Testing Strategy**: {validation_testing_approach}
- **Monitoring Plan**: {production_monitoring_strategy}
- **Rollback Plan**: {failure_recovery_strategy}

---

## 6. Analysis Confidence & Recommendations

### Assessment Scores
- **Conceptual Integrity**: {score}/5 - {brief_assessment}
- **Architectural Soundness**: {score}/5 - {brief_assessment}
- **Technical Feasibility**: {score}/5 - {brief_assessment}
- **Implementation Readiness**: {score}/5 - {brief_assessment}
- **Overall Confidence**: {overall_score}/5

### Final Recommendation
**Status**: {PROCEED|PROCEED_WITH_MODIFICATIONS|RECONSIDER|REJECT}

**Rationale**: {clear_explanation_of_recommendation}

**Critical Prerequisites**: {what_must_be_resolved_before_proceeding}

---

## 7. Reference Information

### Tool Analysis Summary
- **Gemini Insights**: {key_architectural_and_pattern_insights}
- **Codex Validation**: {technical_feasibility_and_implementation_notes}
- **Consensus Points**: {agreements_between_tools}
- **Conflicting Views**: {disagreements_and_resolution}

### Context & Resources
- **Analysis Context**: {context_package_reference}
- **Documentation References**: {relevant_documentation}
- **Related Patterns**: {similar_implementations_in_codebase}
- **External Resources**: {external_references_and_best_practices}
```

## CONTENT REQUIREMENTS

### Analysis Priority Sources
1. **PRIMARY**: Individual role analysis.md files (system-architect, ui-designer, etc.) - technical details, ADRs, decision context
2. **SECONDARY**: synthesis-specification.md - integrated requirements, cross-role alignment
3. **REFERENCE**: topic-framework.md - discussion context

### Focus Areas
- **SOLUTION IMPROVEMENTS**: How to enhance current design
- **KEY DESIGN DECISIONS**: Critical choices with rationale, alternatives, tradeoffs
- **CRITICAL INSIGHTS**: Non-obvious findings, risks, opportunities
- **OPTIMIZATION**: Performance, security, code quality recommendations

### Exclusions
- ❌ Task lists or implementation steps
- ❌ Code examples or snippets
- ❌ Project management timelines
- ❌ Resource allocation details

## OUTPUT VALIDATION

### Completeness Checklist
□ All 7 sections present with content
□ Executive Summary with feasibility score
□ Current State Analysis with findings
□ Solution Design with 2+ key decisions
□ Implementation Strategy with code targets
□ Optimization recommendations in 3 areas
□ Confidence scores with final recommendation
□ Reference information included

### Quality Standards
□ Design decisions include rationale and alternatives
□ Code targets specify file:function:lines format
□ Risk assessment with mitigation strategies
□ Quantified scores (X/5) for all assessments
□ Clear PROCEED/RECONSIDER/REJECT recommendation

Focus: Solution-focused technical analysis emphasizing design decisions and critical insights.
