Task JSON Schema - Enhanced 5-Field Schema with Artifacts Integration

## Schema Structure

```json
{
  "id": "IMPL-N[.M]",
  "title": "Descriptive task name",
  "status": "pending",
  "meta": {
    "type": "feature|bugfix|refactor|test|docs",
    "agent": "@code-developer|@test-fix-agent|@general-purpose"
  },
  "context": {
    "requirements": ["extracted from analysis"],
    "focus_paths": ["src/paths"],
    "acceptance": ["measurable criteria"],
    "depends_on": ["IMPL-N"],
    "artifacts": [
      {
        "type": "synthesis_specification",
        "path": "{synthesis_spec_path}",
        "priority": "highest",
        "usage": "Primary requirement source - use for consolidated requirements and cross-role alignment"
      },
      {
        "type": "role_analysis",
        "path": "{role_analysis_path}",
        "priority": "high",
        "usage": "Technical/design/business details from specific roles. Common roles: system-architect (ADRs, APIs, caching), ui-designer (design tokens, layouts), product-manager (user stories, metrics)",
        "note": "Dynamically discovered - multiple role analysis files included based on brainstorming results"
      },
      {
        "type": "topic_framework",
        "path": "{topic_framework_path}",
        "priority": "low",
        "usage": "Discussion context and framework structure"
      }
    ]
  },
  "flow_control": {
    "pre_analysis": [
      {
        "step": "load_synthesis_specification",
        "action": "Load consolidated synthesis specification",
        "commands": [
          "bash(ls {synthesis_spec_path} 2>/dev/null || echo 'not found')",
          "Read({synthesis_spec_path})"
        ],
        "output_to": "synthesis_specification",
        "on_error": "skip_optional"
      },
      {
        "step": "mcp_codebase_exploration",
        "action": "Explore codebase using MCP",
        "command": "mcp__code-index__find_files(pattern=\"[patterns]\") && mcp__code-index__search_code_advanced(pattern=\"[patterns]\")",
        "output_to": "codebase_structure"
      },
      {
        "step": "analyze_task_patterns",
        "action": "Analyze existing code patterns",
        "commands": [
          "bash(cd \"[focus_paths]\")",
          "bash(~/.claude/scripts/gemini-wrapper -p \"PURPOSE: Analyze patterns TASK: Review '[title]' CONTEXT: [synthesis_specification] EXPECTED: Pattern analysis RULES: Prioritize synthesis-specification.md\")"
        ],
        "output_to": "task_context",
        "on_error": "fail"
      }
    ],
    "implementation_approach": [
      {
        "step": 1,
        "title": "Implement task following synthesis specification",
        "description": "Implement '[title]' following synthesis specification. PRIORITY: Use synthesis-specification.md as primary requirement source. When implementation needs technical details (e.g., API schemas, caching configs, design tokens), refer to artifacts[] for detailed specifications from original role analyses.",
        "modification_points": [
          "Apply consolidated requirements from synthesis-specification.md",
          "Follow technical guidelines from synthesis",
          "Consult artifacts for implementation details when needed",
          "Integrate with existing patterns"
        ],
        "logic_flow": [
          "Load synthesis specification and relevant role artifacts",
          "Execute MCP code-index discovery for relevant files",
          "Analyze existing patterns and identify modification targets",
          "Implement following specification",
          "Consult artifacts for technical details when needed",
          "Validate against acceptance criteria"
        ],
        "depends_on": [],
        "output": "implementation"
      }
    ],
    "target_files": ["file:function:lines", "path/to/NewFile.ts"]
  }
}
```

## Field Descriptions

### Required Fields

**id**: Task identifier following format IMPL-N or IMPL-N.M for subtasks
- Top-level: IMPL-1, IMPL-2, ...
- Subtasks: IMPL-1.1, IMPL-1.2, ...

**title**: Clear, descriptive task name indicating the work to be done

**status**: Current task state
- "pending": Not started
- "active": Currently in progress
- "completed": Successfully finished
- "blocked": Waiting on dependencies
- "container": Parent task with subtasks

**meta**: Metadata for task execution
- type: Category of work (feature, bugfix, refactor, test, docs)
- agent: Designated agent for execution (@code-developer, @test-fix-agent, @general-purpose)

**context**: Rich context for task execution
- requirements: Clear, extracted requirements from analysis
- focus_paths: Specific directories/modules to work on
- acceptance: Measurable criteria for task completion
- depends_on: Array of task IDs that must complete first
- artifacts: Brainstorming outputs with usage guidance

### Artifacts Array Structure

Each artifact entry includes:
- **type**: Category (synthesis_specification, role_analysis, topic_framework)
- **path**: Relative path from project root
- **priority**: highest | high | medium | low
- **usage**: Clear description of when and how to use this artifact
- **note**: Optional additional context or discovery information

### Flow Control Structure

**pre_analysis**: Preparatory steps before implementation
- load_synthesis_specification: Load primary requirements source
- mcp_codebase_exploration: Discover relevant files using MCP tools
- analyze_task_patterns: Analyze existing patterns for consistency

**implementation_approach**: Detailed implementation steps
- step: Sequential step number
- title: Step description
- description: Detailed instructions with artifact usage guidance
- modification_points: Specific code locations or patterns to modify
- logic_flow: Execution sequence
- depends_on: Step dependencies
- output: Expected deliverable

**target_files**: Specific files to modify in format "file:function:lines" or "path/to/NewFile.ts"

## MCP Tool Integration Examples

### Code Index Usage
```javascript
// Discover authentication-related files
mcp__code-index__find_files(pattern="*auth*")

// Search for OAuth patterns
mcp__code-index__search_code_advanced(
  pattern="oauth|jwt|authentication",
  file_pattern="*.{ts,js}"
)

// Get file summary for key components
mcp__code-index__get_file_summary(
  file_path="src/auth/index.ts"
)
```

### Exa Research Usage
```javascript
// Get best practices for task implementation
mcp__exa__get_code_context_exa(
  query="TypeScript OAuth2 implementation patterns",
  tokensNum="dynamic"
)

// Research specific API usage
mcp__exa__get_code_context_exa(
  query="Express.js JWT middleware examples",
  tokensNum=5000
)
```

## Artifact Priority Guidelines

1. **synthesis-specification.md** (highest): Use as primary requirement source for all tasks
2. **role-specific analysis** (high): Consult for technical details, design specifications, or business context
3. **topic-framework.md** (low): Reference for discussion context and framework structure

## Usage in Agent Prompts

When generating task JSONs, ensure:
- Extract requirements from ANALYSIS_RESULTS.md
- Map artifacts based on task domain (UI → ui-designer, Backend → system-architect)
- Include MCP tool integration in pre_analysis steps
- Provide clear artifact usage guidance in implementation_approach
- Specify exact modification targets in target_files
