Create or update module-level CLAUDE.md documentation:

## Layer 3: Module Level Documentation Requirements

### Content Focus (MUST INCLUDE):
1. **Module-Specific Implementation Patterns**
   - Implementation patterns used within this module
   - Common coding approaches and idioms
   - Module-specific design patterns

2. **Internal Architecture and Design Decisions**
   - How the module is internally organized
   - Key design decisions and their rationale
   - Component relationships within the module

3. **API Contracts and Interfaces**
   - Public interfaces exposed by this module
   - Input/output contracts and data formats
   - Integration points with other modules

4. **Module Dependencies and Relationships**
   - Direct dependencies of this module
   - How this module fits into the larger system
   - Data flow in and out of the module

5. **Testing Strategies for This Module**
   - Testing approaches specific to this module
   - Test coverage strategies and targets
   - Module-specific testing tools and frameworks

### Content Restrictions (STRICTLY AVOID):
- Project overview content (belongs in root-level docs)
- Domain-wide architectural patterns (belongs in domain-level docs)
- Detailed function documentation (belongs in sub-module-level docs)
- Configuration specifics (belongs in sub-module-level docs)

### Documentation Style:
- Focus on module-level architecture and patterns
- Explain how components within the module work together
- Document public interfaces and contracts
- Reference sub-module docs for detailed implementation

### Template Structure:
```markdown
# [Module Name] - Module Architecture

## 1. Module Overview
[Module's purpose and responsibilities]

## 2. Implementation Patterns
[Common patterns and approaches used]

## 3. Internal Architecture
[How the module is organized internally]

## 4. Public Interfaces
[APIs and contracts exposed by this module]

## 5. Dependencies and Integration
[Module dependencies and system integration]

## 6. Testing Strategy
[Testing approaches for this module]
```

Remember: This is Layer 3 - focus on module-level architecture and patterns, avoiding both domain-wide and detailed implementation concerns.